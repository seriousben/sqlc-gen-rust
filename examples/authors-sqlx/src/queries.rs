/// This file is @generated by sqlc-gen-rust.
#[derive(Debug, Clone)]
pub struct GetAuthorRow {
    id: i64,
    name: String,
    bio: Option<String>,
}
async fn get_author(id: i64) -> Result<GetAuthorRow, Box<dyn std::error::Error>> {
    let rec = sqlx::query!(
        "
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
"
    );
    Err(Box::new(std::io::Error::new(std::io::ErrorKind::Other, "not implemented")))
}
#[derive(Debug, Clone)]
pub struct ListAuthorsRow {
    id: i64,
    name: String,
    bio: Option<String>,
}
async fn list_authors() -> Result<Vec<ListAuthorsRow>, Box<dyn std::error::Error>> {
    let rec = sqlx::query!("
SELECT id, name, bio FROM authors
ORDER BY name
");
    Err(Box::new(std::io::Error::new(std::io::ErrorKind::Other, "not implemented")))
}
#[derive(Debug, Clone)]
pub struct CreateAuthorRow {
    id: i64,
    name: String,
    bio: Option<String>,
}
async fn create_author(
    name: String,
    bio: Option<String>,
) -> Result<CreateAuthorRow, Box<dyn std::error::Error>> {
    let rec = sqlx::query!(
        "
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
"
    );
    Err(Box::new(std::io::Error::new(std::io::ErrorKind::Other, "not implemented")))
}
#[derive(Debug, Clone)]
pub struct DeleteAuthorRow {}
async fn delete_author(id: i64) -> Result<DeleteAuthorRow, Box<dyn std::error::Error>> {
    let rec = sqlx::query!("
DELETE FROM authors
WHERE id = $1
");
    Err(Box::new(std::io::Error::new(std::io::ErrorKind::Other, "not implemented")))
}
