/// This file is @generated by sqlc-gen-rust.
#[derive(Debug, Clone, sqlx::FromRow)]
pub struct GetAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
pub async fn get_author<'e, E>(db: E, id: i64) -> Result<GetAuthorRow, sqlx::Error>
where
    E: sqlx::Executor<'e, Database = sqlx::Postgres>,
{
    let rec: GetAuthorRow = sqlx::query_as(
            "
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
",
        )
        .bind(id)
        .fetch_one(db)
        .await?;
    Ok(rec)
}
#[derive(Debug, Clone, sqlx::FromRow)]
pub struct ListAuthorsRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
pub async fn list_authors<'e, E>(db: E) -> Result<Vec<ListAuthorsRow>, sqlx::Error>
where
    E: sqlx::Executor<'e, Database = sqlx::Postgres>,
{
    let rec: Vec<ListAuthorsRow> = sqlx::query_as(
            "
SELECT id, name, bio FROM authors
ORDER BY name
",
        )
        .fetch_all(db)
        .await?;
    Ok(rec)
}
#[derive(Debug, Clone, sqlx::FromRow)]
pub struct CreateAuthorRow {
    pub id: i64,
    pub name: String,
    pub bio: Option<String>,
}
pub async fn create_author<'e, E>(
    db: E,
    name: String,
    bio: Option<String>,
) -> Result<CreateAuthorRow, sqlx::Error>
where
    E: sqlx::Executor<'e, Database = sqlx::Postgres>,
{
    let rec: CreateAuthorRow = sqlx::query_as(
            "
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
",
        )
        .bind(name)
        .bind(bio)
        .fetch_one(db)
        .await?;
    Ok(rec)
}
pub async fn delete_author<'e, E>(db: E, id: i64) -> Result<(), sqlx::Error>
where
    E: sqlx::Executor<'e, Database = sqlx::Postgres>,
{
    sqlx::query("
DELETE FROM authors
WHERE id = $1
"
    ).bind(id).execute(db).await?;
    Ok(())
}
