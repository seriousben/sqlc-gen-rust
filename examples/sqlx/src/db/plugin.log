
–0parsing plugin options
plugin_option: PluginOption { driver: "sqlx", debug: true }
query: Query { text: "SELECT id, name, bio FROM authors\nWHERE id = $1 LIMIT 1", name: "GetAuthor", cmd: ":one", columns: [Column { name: "id", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "bigserial" }), is_sqlc_slice: false, embed_table: None, original_name: "id", unsigned: false, array_dims: 0 }, Column { name: "name", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "name", unsigned: false, array_dims: 0 }, Column { name: "bio", not_null: false, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "bio", unsigned: false, array_dims: 0 }], params: [Parameter { number: 1, column: Some(Column { name: "id", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "bigserial" }), is_sqlc_slice: false, embed_table: None, original_name: "id", unsigned: false, array_dims: 0 }) }], comments: [], filename: "query.sql", insert_into_table: None }
query: Query { text: "SELECT id, name, bio FROM authors\nORDER BY name", name: "ListAuthors", cmd: ":many", columns: [Column { name: "id", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "bigserial" }), is_sqlc_slice: false, embed_table: None, original_name: "id", unsigned: false, array_dims: 0 }, Column { name: "name", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "name", unsigned: false, array_dims: 0 }, Column { name: "bio", not_null: false, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "bio", unsigned: false, array_dims: 0 }], params: [], comments: [], filename: "query.sql", insert_into_table: None }
query: Query { text: "INSERT INTO authors (\n  name, bio\n) VALUES (\n  $1, $2\n)\nRETURNING id, name, bio", name: "CreateAuthor", cmd: ":one", columns: [Column { name: "id", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "bigserial" }), is_sqlc_slice: false, embed_table: None, original_name: "id", unsigned: false, array_dims: 0 }, Column { name: "name", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "name", unsigned: false, array_dims: 0 }, Column { name: "bio", not_null: false, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "bio", unsigned: false, array_dims: 0 }], params: [Parameter { number: 1, column: Some(Column { name: "name", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "public", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "name", unsigned: false, array_dims: 0 }) }, Parameter { number: 2, column: Some(Column { name: "bio", not_null: false, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "public", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "text" }), is_sqlc_slice: false, embed_table: None, original_name: "bio", unsigned: false, array_dims: 0 }) }], comments: [], filename: "query.sql", insert_into_table: Some(Identifier { catalog: "", schema: "", name: "authors" }) }
query: Query { text: "DELETE FROM authors\nWHERE id = $1", name: "DeleteAuthor", cmd: ":exec", columns: [], params: [Parameter { number: 1, column: Some(Column { name: "id", not_null: true, is_array: false, comment: "", length: -1, is_named_param: false, is_func_call: false, scope: "", table: Some(Identifier { catalog: "", schema: "", name: "authors" }), table_alias: "", r#type: Some(Identifier { catalog: "", schema: "", name: "bigserial" }), is_sqlc_slice: false, embed_table: None, original_name: "id", unsigned: false, array_dims: 0 }) }], comments: [], filename: "query.sql", insert_into_table: None }
